function f1() { }
function f2() { }
function f3() { }
function f4() { }
function f5() { }
function f6() { }

function f() {
    function g() {
        g.$closure.print = 0;
        print(g.$closure.print);
        print(10);
        ::print(20);
    }
    g();
    print(30);
}

f();

print("\n\n\n");

pi = 3.14159;
function Move(dx, dy) {
    x = x + dx;
    y = y + dy;
    print(::pi);
}

phi = 1;
function Print() {
    print(x, y);
    print($lambda);
    //print($lambda.$closure);
    print(::phi);
}

function Point(x, y) {
    local pt = [
        { "x" : x },
        { "y" : y },
        { "move" : Move },
        { "print" : Print }
    ];

    pt.move.$closure = [
        { "$local" : pt },
        { "$outer" : Move.$closure }
    ];

    pt.print.$closure = [
        { "$local" : pt },
        { "$outer" : Print.$closure }
    ];

    return pt;
}

p1 = Point(1,1);
p1.move(10,21);
p1.print();

p2 = Point(0,0);
p2.move(30,30);
p2.print();

print("\n\n\n\n");

(function outer() {
    print($lambda);
    (function inner() {
        print($lambda);
        (function more_inner() {
            print($lambda);
            (function () {
                print($lambda);
                (function most_inner() {
                    print($lambda);
                })();
            })();
        })();
    })();
})();

print("\n\n\n");
function foo(x) {
    return (function() {
        if($lambda.$closure.x != nil) print(x);
    });
}

func1 = foo(1);
func2 = foo(2);
func3 = foo(3);
func4 = foo(4);
func5 = foo(5);

func4.$closure = [ { "x" : "hacked" } ];
func5.$closure = nil;

func1();
func2();
func3();
func4();
func5();


function hacking() {
    $lambda = 231;
    $lambda.$closure.print = 10;
}
hacking(); // Not allowed