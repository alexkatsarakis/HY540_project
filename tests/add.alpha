/*
y = 0;

while(true) {
    a = 2;
    break;
    continue;
    ::y = "foo";
}

m = not a and b;

x.y;
x["foo"];

return;
return 10 + 2 / 3;

if(true) a = 1;
else if (false) b = 2;
else c = 3;

for(i = 0, i = 1, i = 3, i = 4; i < 3; i = 4) {
    for(i = 0; i < 10; ++i) {
        for(i = 0; i < 10; ++i) {
            if(true) false;
            else if(false) true;
            else 5;
        }
    }
}

for(; i < 10;) true;

object = [ { "a" : 2 }, { "b" : 2 }, { "c" : 3 } ];

function f(a, b, c, d, e) {
    function g(a, b, c) {
        function(){}
    }
}

f(1,2);
g.x(a, "str");
g.x.f();

f()()();

(function(f) { ::print(f); })("sa");

w = 1;

local y = 2;

::x = 3;

a + b;

function f(a, b, c) {

}

a = 1;
a = 2;
a = 3;
a = 4;
a = 5;

x.f()().y;

--fot;

t.x---++t[3]+--t["a"]-t.z++;

x = "Hello my name is \"Mandos\" and i \'love\' C++";

a = "";

y.$inner.$outer.$inner = false;

f()().$outer = 25;

pi = 3.141592653589793238;

x = "string with all legal esc chars (with comma between them)\\, \", \t, \n, \"";
a = 1;
b = 1.1;
c = 1.12;
d = 3.141592653589793238;
*/

/*
x = 1+2;
x = 4*5;
y = 10 - 2.5;
z = 40 / 4;
w = 29 % 7;
::y = 2;

3 > 2;

z = x + y + 12;
::y = 3;
result = z < y * 10;
omega = -3.14;

f1 = f;
f2 = "foobar";
boolean = not f1 and f2;
*/

//x = 1;
//function f() { }
//y = 2;
//x = 3;
//z = x + y * 10;

//x = 1;
//y = --x;
//z = x;
//w = z;

//x = 1;
//function f() { print("Hello"); }
//y = 2;
//z = print(1,2,3+4, 25*3, ++x, y--, y);
//print(z);

//a = 1;
//a.b = 2;
//a.$outer = 3;
//a = b;
//x = a.b;
//a++;
//a.b++;
//a.b.c.d = 2;

// Error cases
// function print() { }
// function x() { }
//// z = 10 + false;
//// ::I_did_not_define_this = 3;

//x = 1;
//{
//    y = 2;
//    function f() {
//
//    }
//    z = 3;
//    print(x, y, z);
//}
//w = 4;
//print(x, w, y);
//
//if (x >= 1) print("Here");
//else print("There");
//
//print("\n\n\n\n\n");
//x = 5;
//while(x >= 0) {
//    print(x);
//    x--;
//}
//
//print("\n\n\n\n\n");
//for(i = 0; i < 15; ++i) {
//    if(i == 5) continue;
//    print(i);
//    if(i == 10) break;
//}
//
//print("\n");
//x = 10;
//if(false) print(1);
//else if (false) print(2);
//else if (x > 5) print(3);
//else print(4);

/*
a = [];
b = [ { "a": 10 } , { "b" : 20 } ];
t = [1 + 2, 3, 35 * 10];
functor = ["()", (function (){ } )];
c = [20, false, undef, nil, b];
d = [ { "x" : print } , { 30 : "foo" } , { 40 : c} ];

print(a);
print(b);
print(t);
print(functor);
print(c);
print(d);
*/

/*
function f(){}
g = f;
g = 2;
f = 3;
print(f);
*/

/*
t = [];
x = 10;

var = 2;
print(var);
var = x;
print(var);

print("\n\n\n\n");
*/

//t = [];
//var = t.x;
//print(var);
//t.x = 3;
//print(t.x);
//t.x++;
//print(t.x);

/*
a = [];
b = [ { "a": 10 } , { "b" : 20 } ];
t = [1 + 2, 3, 35 * 10];
functor = ["()", (function (){ } )];
c = [20, false, undef, nil, b];
d = [ { "x" : print } , { 30 : "foo" } , { 40 : c} ];

print(d[40][4].a);
*/

/*
t = [];
print(t.x);
t.x = 23;
t.y = 40;
t.foo = "text";
print(t);
print(t.y);
print(t.$foo);
t.$closure = "foobar";
print(t.$closure);

t[20] = 42;
x = 20;
print(t[20]);
print(t[x]);
print(t[10 + 10]);
*/

/*
x = 20;
{
    local x;
    print(x);
    x = "test";
    print(x);
    ::x = 30;
}
print(x);
print(::x);
*/

/*
x = 2;
{
    {
        {
            {
                {
                    local x = 1;
                    print(x);
                    print(::x);
                    ::x = 3;
                    print(::x);
                }
            }
        }
    }
}
print(x);;;;

for(i = 0; i < 5; ++i) {
    if (i == 3) continue;
    print(i);
}

x = 5;
t = [ { "a" : 21 } ];

print("\n\n\n\n");
print(x);
print(t.a);
print(++x);
print(t.a--);
print(t.a);

*/

x = "foobaridion";
w = 3;
table = [ { x : w } ];
print(table);
print("\n\n\n\n");
print(typeof(print));
print(typeof(w));
print(typeof(2));
print(typeof("fo"));

table.x = 1;
table.y = 2;
table.z = 3;
table[0] = "a";
table[1] = "b";
print(object_size(table));
print(object_keys(table));

t = [];
t.p = print;
t.p("\"Hacked\"");
t.p(t.y);

function f() {}
print(f.t);
print(f.$closure.t);

f.t = 3;
string = "$closure";
f[string].foo = 142;
print(t);
print(foo);