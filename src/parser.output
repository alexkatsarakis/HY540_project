Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmts stmt
    3      | %empty

    4 stmt: expr SEMICOLON
    5     | ifstmt
    6     | whilestmt
    7     | forstmt
    8     | returnstmt
    9     | breakstmt
   10     | continuestmt
   11     | block
   12     | funcdef
   13     | SEMICOLON
   14     | error SEMICOLON

   15 expr: lvalue ASSIGN expr
   16     | expr PLUS expr
   17     | expr MINUS expr
   18     | expr MUL expr
   19     | expr DIV expr
   20     | expr MODULO expr
   21     | expr GREATER expr
   22     | expr LESS expr
   23     | expr GREATER_EQUAL expr
   24     | expr LESS_EQUAL expr
   25     | expr EQUAL expr
   26     | expr NOT_EQUAL expr
   27     | expr AND expr
   28     | expr OR expr
   29     | term

   30 term: LEFT_PAR expr RIGHT_PAR
   31     | MINUS expr
   32     | NOT expr
   33     | PLUS_PLUS lvalue
   34     | lvalue PLUS_PLUS
   35     | MINUS_MINUS lvalue
   36     | lvalue MINUS_MINUS
   37     | primary

   38 primary: lvalue
   39        | call
   40        | objectdef
   41        | LEFT_PAR funcdef RIGHT_PAR
   42        | const

   43 lvalue: ID
   44       | LOCAL ID
   45       | DOUBLE_COLON ID
   46       | member

   47 member: lvalue DOT ID
   48       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   49       | call DOT ID
   50       | call LEFT_BRACKET expr RIGHT_BRACKET

   51 call: call LEFT_PAR elist RIGHT_PAR
   52     | lvalue callsuffix
   53     | LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

   54 callsuffix: normcall
   55           | methodcall

   56 normcall: LEFT_PAR elist RIGHT_PAR

   57 methodcall: DOUBLE_DOT ID LEFT_PAR elist RIGHT_PAR

   58 elist: expr comma_exprs
   59      | %empty

   60 comma_exprs: comma_exprs COMMA expr
   61            | %empty

   62 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   63          | LEFT_BRACKET indexed RIGHT_BRACKET

   64 indexed: indexedelem comma_indexedelems

   65 comma_indexedelems: comma_indexedelems COMMA indexedelem
   66                   | %empty

   67 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   68 $@1: %empty

   69 block: LEFT_BRACE $@1 stmts RIGHT_BRACE

   70 funcdef: FUNCTION ID LEFT_PAR idlist RIGHT_PAR block
   71        | FUNCTION LEFT_PAR idlist RIGHT_PAR block

   72 const: NUMBER
   73      | STRING
   74      | NIL
   75      | TRUE
   76      | FALSE

   77 idlist: ID comma_ids
   78       | %empty

   79 comma_ids: comma_ids COMMA ID
   80          | %empty

   81 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt
   82       | IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

   83 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR stmt

   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

   85 returnstmt: RETURN expr SEMICOLON
   86           | RETURN SEMICOLON

   87 breakstmt: BREAK SEMICOLON

   88 continuestmt: CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256) 14
STRING (258) 73
ID (259) 43 44 45 47 49 57 70 77 79
NUMBER (260) 72
PLUS (261) 16
MINUS (262) 17 31
MUL (263) 18
DIV (264) 19
MODULO (265) 20
EQUAL (266) 25
NOT_EQUAL (267) 26
GREATER (268) 21
LESS (269) 22
GREATER_EQUAL (270) 23
LESS_EQUAL (271) 24
AND (272) 27
OR (273) 28
IF (274) 81 82
ELSE (275) 82
WHILE (276) 83
FOR (277) 84
FUNCTION (278) 70 71
RETURN (279) 85 86
BREAK (280) 87
CONTINUE (281) 88
NOT (282) 32
LOCAL (283) 44
TRUE (284) 75
FALSE (285) 76
NIL (286) 74
LEFT_BRACE (287) 67 69
RIGHT_BRACE (288) 67 69
LEFT_BRACKET (289) 48 50 62 63
RIGHT_BRACKET (290) 48 50 62 63
LEFT_PAR (291) 30 41 51 53 56 57 70 71 81 82 83 84
RIGHT_PAR (292) 30 41 51 53 56 57 70 71 81 82 83 84
SEMICOLON (293) 4 13 14 84 85 86 87 88
COMMA (294) 60 65 79
COLON (295) 67
DOUBLE_COLON (296) 45
DOT (297) 47 49
DOUBLE_DOT (298) 57
ASSIGN (299) 15
PLUS_PLUS (300) 33 34
MINUS_MINUS (301) 35 36
UMINUS (302)
NO_ELSE (303)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
stmts (51)
    on left: 2 3, on right: 1 2 69
stmt (52)
    on left: 4 5 6 7 8 9 10 11 12 13 14, on right: 2 81 82 83 84
expr (53)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29, on right:
    4 15 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 48 50 58 60
    67 81 82 83 84 85
term (54)
    on left: 30 31 32 33 34 35 36 37, on right: 29
primary (55)
    on left: 38 39 40 41 42, on right: 37
lvalue (56)
    on left: 43 44 45 46, on right: 15 33 34 35 36 38 47 48 52
member (57)
    on left: 47 48 49 50, on right: 46
call (58)
    on left: 51 52 53, on right: 39 49 50 51
callsuffix (59)
    on left: 54 55, on right: 52
normcall (60)
    on left: 56, on right: 54
methodcall (61)
    on left: 57, on right: 55
elist (62)
    on left: 58 59, on right: 51 53 56 57 62 84
comma_exprs (63)
    on left: 60 61, on right: 58 60
objectdef (64)
    on left: 62 63, on right: 40
indexed (65)
    on left: 64, on right: 63
comma_indexedelems (66)
    on left: 65 66, on right: 64 65
indexedelem (67)
    on left: 67, on right: 64 65
block (68)
    on left: 69, on right: 11 70 71
$@1 (69)
    on left: 68, on right: 69
funcdef (70)
    on left: 70 71, on right: 12 41 53
const (71)
    on left: 72 73 74 75 76, on right: 42
idlist (72)
    on left: 77 78, on right: 70 71
comma_ids (73)
    on left: 79 80, on right: 77 79
ifstmt (74)
    on left: 81 82, on right: 5
whilestmt (75)
    on left: 83, on right: 6
forstmt (76)
    on left: 84, on right: 7
returnstmt (77)
    on left: 85 86, on right: 8
breakstmt (78)
    on left: 87, on right: 9
continuestmt (79)
    on left: 88, on right: 10


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (stmts)

    program  go to state 1
    stmts    go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts .
    2 stmts: stmts . stmt

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $end  reduce using rule 1 (program)

    stmt          go to state 28
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 3

    0 $accept: program $end .

    $default  accept


State 4

   14 stmt: error . SEMICOLON

    SEMICOLON  shift, and go to state 45


State 5

   73 const: STRING .

    $default  reduce using rule 73 (const)


State 6

   43 lvalue: ID .

    $default  reduce using rule 43 (lvalue)


State 7

   72 const: NUMBER .

    $default  reduce using rule 72 (const)


State 8

   31 term: MINUS . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 46
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 9

   81 ifstmt: IF . LEFT_PAR expr RIGHT_PAR stmt
   82       | IF . LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

    LEFT_PAR  shift, and go to state 47


State 10

   83 whilestmt: WHILE . LEFT_PAR expr RIGHT_PAR stmt

    LEFT_PAR  shift, and go to state 48


State 11

   84 forstmt: FOR . LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    LEFT_PAR  shift, and go to state 49


State 12

   70 funcdef: FUNCTION . ID LEFT_PAR idlist RIGHT_PAR block
   71        | FUNCTION . LEFT_PAR idlist RIGHT_PAR block

    ID        shift, and go to state 50
    LEFT_PAR  shift, and go to state 51


State 13

   85 returnstmt: RETURN . expr SEMICOLON
   86           | RETURN . SEMICOLON

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 52
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 53
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 14

   87 breakstmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 54


State 15

   88 continuestmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 16

   32 term: NOT . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 56
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 17

   44 lvalue: LOCAL . ID

    ID  shift, and go to state 57


State 18

   75 const: TRUE .

    $default  reduce using rule 75 (const)


State 19

   76 const: FALSE .

    $default  reduce using rule 76 (const)


State 20

   74 const: NIL .

    $default  reduce using rule 74 (const)


State 21

   69 block: LEFT_BRACE . $@1 stmts RIGHT_BRACE

    $default  reduce using rule 68 ($@1)

    $@1  go to state 58


State 22

   62 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   63          | LEFT_BRACKET . indexed RIGHT_BRACKET

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 59
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr         go to state 60
    term         go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 61
    objectdef    go to state 35
    indexed      go to state 62
    indexedelem  go to state 63
    const        go to state 38


State 23

   30 term: LEFT_PAR . expr RIGHT_PAR
   41 primary: LEFT_PAR . funcdef RIGHT_PAR
   53 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    FUNCTION      shift, and go to state 12
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 64
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    funcdef    go to state 65
    const      go to state 38


State 24

   13 stmt: SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 25

   45 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 66


State 26

   33 term: PLUS_PLUS . lvalue

    ID            shift, and go to state 6
    LOCAL         shift, and go to state 17
    LEFT_PAR      shift, and go to state 67
    DOUBLE_COLON  shift, and go to state 25

    lvalue  go to state 68
    member  go to state 33
    call    go to state 69


State 27

   35 term: MINUS_MINUS . lvalue

    ID            shift, and go to state 6
    LOCAL         shift, and go to state 17
    LEFT_PAR      shift, and go to state 67
    DOUBLE_COLON  shift, and go to state 25

    lvalue  go to state 70
    member  go to state 33
    call    go to state 69


State 28

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


State 29

    4 stmt: expr . SEMICOLON
   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    SEMICOLON      shift, and go to state 84


State 30

   29 expr: term .

    $default  reduce using rule 29 (expr)


State 31

   37 term: primary .

    $default  reduce using rule 37 (term)


State 32

   15 expr: lvalue . ASSIGN expr
   34 term: lvalue . PLUS_PLUS
   36     | lvalue . MINUS_MINUS
   38 primary: lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 85
    LEFT_PAR      shift, and go to state 86
    DOT           shift, and go to state 87
    DOUBLE_DOT    shift, and go to state 88
    ASSIGN        shift, and go to state 89
    PLUS_PLUS     shift, and go to state 90
    MINUS_MINUS   shift, and go to state 91

    $default  reduce using rule 38 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 33

   46 lvalue: member .

    $default  reduce using rule 46 (lvalue)


State 34

   39 primary: call .
   49 member: call . DOT ID
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96
    DOT           shift, and go to state 97

    $default  reduce using rule 39 (primary)


State 35

   40 primary: objectdef .

    $default  reduce using rule 40 (primary)


State 36

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 37

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


State 38

   42 primary: const .

    $default  reduce using rule 42 (primary)


State 39

    5 stmt: ifstmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: whilestmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: forstmt .

    $default  reduce using rule 7 (stmt)


State 42

    8 stmt: returnstmt .

    $default  reduce using rule 8 (stmt)


State 43

    9 stmt: breakstmt .

    $default  reduce using rule 9 (stmt)


State 44

   10 stmt: continuestmt .

    $default  reduce using rule 10 (stmt)


State 45

   14 stmt: error SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 46

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   31 term: MINUS expr .

    $default  reduce using rule 31 (term)


State 47

   81 ifstmt: IF LEFT_PAR . expr RIGHT_PAR stmt
   82       | IF LEFT_PAR . expr RIGHT_PAR stmt ELSE stmt

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 98
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 48

   83 whilestmt: WHILE LEFT_PAR . expr RIGHT_PAR stmt

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 99
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 49

   84 forstmt: FOR LEFT_PAR . elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 100
    objectdef  go to state 35
    const      go to state 38


State 50

   70 funcdef: FUNCTION ID . LEFT_PAR idlist RIGHT_PAR block

    LEFT_PAR  shift, and go to state 101


State 51

   71 funcdef: FUNCTION LEFT_PAR . idlist RIGHT_PAR block

    ID  shift, and go to state 102

    $default  reduce using rule 78 (idlist)

    idlist  go to state 103


State 52

   86 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 86 (returnstmt)


State 53

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   85 returnstmt: RETURN expr . SEMICOLON

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    SEMICOLON      shift, and go to state 104


State 54

   87 breakstmt: BREAK SEMICOLON .

    $default  reduce using rule 87 (breakstmt)


State 55

   88 continuestmt: CONTINUE SEMICOLON .

    $default  reduce using rule 88 (continuestmt)


State 56

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   32 term: NOT expr .

    $default  reduce using rule 32 (term)


State 57

   44 lvalue: LOCAL ID .

    $default  reduce using rule 44 (lvalue)


State 58

   69 block: LEFT_BRACE $@1 . stmts RIGHT_BRACE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 105


State 59

   67 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 106
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 60

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   58 elist: expr . comma_exprs

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83

    $default  reduce using rule 61 (comma_exprs)

    comma_exprs  go to state 107


State 61

   62 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 108


State 62

   63 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 109


State 63

   64 indexed: indexedelem . comma_indexedelems

    $default  reduce using rule 66 (comma_indexedelems)

    comma_indexedelems  go to state 110


State 64

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   30 term: LEFT_PAR expr . RIGHT_PAR

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_PAR      shift, and go to state 111


State 65

   41 primary: LEFT_PAR funcdef . RIGHT_PAR
   53 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 112


State 66

   45 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 45 (lvalue)


State 67

   53 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    FUNCTION  shift, and go to state 12

    funcdef  go to state 113


State 68

   33 term: PLUS_PLUS lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 85
    LEFT_PAR      shift, and go to state 86
    DOT           shift, and go to state 87
    DOUBLE_DOT    shift, and go to state 88

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 69

   49 member: call . DOT ID
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96
    DOT           shift, and go to state 97


State 70

   35 term: MINUS_MINUS lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 85
    LEFT_PAR      shift, and go to state 86
    DOT           shift, and go to state 87
    DOUBLE_DOT    shift, and go to state 88

    $default  reduce using rule 35 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 71

   16 expr: expr PLUS . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 114
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 72

   17 expr: expr MINUS . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 115
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 73

   18 expr: expr MUL . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 116
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 74

   19 expr: expr DIV . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 117
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 75

   20 expr: expr MODULO . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 118
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 76

   25 expr: expr EQUAL . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 119
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 77

   26 expr: expr NOT_EQUAL . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 120
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 78

   21 expr: expr GREATER . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 121
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 79

   22 expr: expr LESS . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 122
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 80

   23 expr: expr GREATER_EQUAL . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 123
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 81

   24 expr: expr LESS_EQUAL . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 124
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 82

   27 expr: expr AND . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 125
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 83

   28 expr: expr OR . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 126
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 84

    4 stmt: expr SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 85

   48 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 127
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 86

   56 normcall: LEFT_PAR . elist RIGHT_PAR

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 128
    objectdef  go to state 35
    const      go to state 38


State 87

   47 member: lvalue DOT . ID

    ID  shift, and go to state 129


State 88

   57 methodcall: DOUBLE_DOT . ID LEFT_PAR elist RIGHT_PAR

    ID  shift, and go to state 130


State 89

   15 expr: lvalue ASSIGN . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 131
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 90

   34 term: lvalue PLUS_PLUS .

    $default  reduce using rule 34 (term)


State 91

   36 term: lvalue MINUS_MINUS .

    $default  reduce using rule 36 (term)


State 92

   52 call: lvalue callsuffix .

    $default  reduce using rule 52 (call)


State 93

   54 callsuffix: normcall .

    $default  reduce using rule 54 (callsuffix)


State 94

   55 callsuffix: methodcall .

    $default  reduce using rule 55 (callsuffix)


State 95

   50 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 132
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 96

   51 call: call LEFT_PAR . elist RIGHT_PAR

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 133
    objectdef  go to state 35
    const      go to state 38


State 97

   49 member: call DOT . ID

    ID  shift, and go to state 134


State 98

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   81 ifstmt: IF LEFT_PAR expr . RIGHT_PAR stmt
   82       | IF LEFT_PAR expr . RIGHT_PAR stmt ELSE stmt

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_PAR      shift, and go to state 135


State 99

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   83 whilestmt: WHILE LEFT_PAR expr . RIGHT_PAR stmt

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_PAR      shift, and go to state 136


State 100

   84 forstmt: FOR LEFT_PAR elist . SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    SEMICOLON  shift, and go to state 137


State 101

   70 funcdef: FUNCTION ID LEFT_PAR . idlist RIGHT_PAR block

    ID  shift, and go to state 102

    $default  reduce using rule 78 (idlist)

    idlist  go to state 138


State 102

   77 idlist: ID . comma_ids

    $default  reduce using rule 80 (comma_ids)

    comma_ids  go to state 139


State 103

   71 funcdef: FUNCTION LEFT_PAR idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 140


State 104

   85 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 85 (returnstmt)


State 105

    2 stmts: stmts . stmt
   69 block: LEFT_BRACE $@1 stmts . RIGHT_BRACE

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    RIGHT_BRACE   shift, and go to state 141
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    stmt          go to state 28
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 106

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   67 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    COLON          shift, and go to state 142


State 107

   58 elist: expr comma_exprs .
   60 comma_exprs: comma_exprs . COMMA expr

    COMMA  shift, and go to state 143

    $default  reduce using rule 58 (elist)


State 108

   62 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 62 (objectdef)


State 109

   63 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 63 (objectdef)


State 110

   64 indexed: indexedelem comma_indexedelems .
   65 comma_indexedelems: comma_indexedelems . COMMA indexedelem

    COMMA  shift, and go to state 144

    $default  reduce using rule 64 (indexed)


State 111

   30 term: LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 30 (term)


State 112

   41 primary: LEFT_PAR funcdef RIGHT_PAR .
   53 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 145

    $default  reduce using rule 41 (primary)


State 113

   53 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 146


State 114

   16 expr: expr . PLUS expr
   16     | expr PLUS expr .
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    $default  reduce using rule 16 (expr)


State 115

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   17     | expr MINUS expr .
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    $default  reduce using rule 17 (expr)


State 116

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   18     | expr MUL expr .
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 117

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   19     | expr DIV expr .
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 19 (expr)


State 118

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   20     | expr MODULO expr .
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 20 (expr)


State 119

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   25     | expr EQUAL expr .
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 120

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   26     | expr NOT_EQUAL expr .
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 121

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   21     | expr GREATER expr .
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 122

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   22     | expr LESS expr .
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 123

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   23     | expr GREATER_EQUAL expr .
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 23 (expr)


State 124

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   24     | expr LESS_EQUAL expr .
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 24 (expr)


State 125

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   27     | expr AND expr .
   28     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 27 (expr)


State 126

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   28     | expr OR expr .

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82

    $default  reduce using rule 28 (expr)


State 127

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   48 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 147


State 128

   56 normcall: LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 148


State 129

   47 member: lvalue DOT ID .

    $default  reduce using rule 47 (member)


State 130

   57 methodcall: DOUBLE_DOT ID . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 149


State 131

   15 expr: lvalue ASSIGN expr .
   16     | expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83

    $default  reduce using rule 15 (expr)


State 132

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   50 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 150


State 133

   51 call: call LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 151


State 134

   49 member: call DOT ID .

    $default  reduce using rule 49 (member)


State 135

   81 ifstmt: IF LEFT_PAR expr RIGHT_PAR . stmt
   82       | IF LEFT_PAR expr RIGHT_PAR . stmt ELSE stmt

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    stmt          go to state 152
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 136

   83 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR . stmt

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    stmt          go to state 153
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 137

   84 forstmt: FOR LEFT_PAR elist SEMICOLON . expr SEMICOLON elist RIGHT_PAR stmt

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 154
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 138

   70 funcdef: FUNCTION ID LEFT_PAR idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 155


State 139

   77 idlist: ID comma_ids .
   79 comma_ids: comma_ids . COMMA ID

    COMMA  shift, and go to state 156

    $default  reduce using rule 77 (idlist)


State 140

   71 funcdef: FUNCTION LEFT_PAR idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 21

    block  go to state 157


State 141

   69 block: LEFT_BRACE $@1 stmts RIGHT_BRACE .

    $default  reduce using rule 69 (block)


State 142

   67 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 158
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 143

   60 comma_exprs: comma_exprs COMMA . expr

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    expr       go to state 159
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    objectdef  go to state 35
    const      go to state 38


State 144

   65 comma_indexedelems: comma_indexedelems COMMA . indexedelem

    LEFT_BRACE  shift, and go to state 59

    indexedelem  go to state 160


State 145

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR . elist RIGHT_PAR

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 161
    objectdef  go to state 35
    const      go to state 38


State 146

   53 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 145


State 147

   48 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 48 (member)


State 148

   56 normcall: LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 56 (normcall)


State 149

   57 methodcall: DOUBLE_DOT ID LEFT_PAR . elist RIGHT_PAR

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 162
    objectdef  go to state 35
    const      go to state 38


State 150

   50 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 50 (member)


State 151

   51 call: call LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 51 (call)


State 152

   81 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt .
   82       | IF LEFT_PAR expr RIGHT_PAR stmt . ELSE stmt

    ELSE  shift, and go to state 163

    $default  reduce using rule 81 (ifstmt)


State 153

   83 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR stmt .

    $default  reduce using rule 83 (whilestmt)


State 154

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr . SEMICOLON elist RIGHT_PAR stmt

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    SEMICOLON      shift, and go to state 164


State 155

   70 funcdef: FUNCTION ID LEFT_PAR idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 21

    block  go to state 165


State 156

   79 comma_ids: comma_ids COMMA . ID

    ID  shift, and go to state 166


State 157

   71 funcdef: FUNCTION LEFT_PAR idlist RIGHT_PAR block .

    $default  reduce using rule 71 (funcdef)


State 158

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   67 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83
    RIGHT_BRACE    shift, and go to state 167


State 159

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MODULO expr
   21     | expr . GREATER expr
   22     | expr . LESS expr
   23     | expr . GREATER_EQUAL expr
   24     | expr . LESS_EQUAL expr
   25     | expr . EQUAL expr
   26     | expr . NOT_EQUAL expr
   27     | expr . AND expr
   28     | expr . OR expr
   60 comma_exprs: comma_exprs COMMA expr .

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    AND            shift, and go to state 82
    OR             shift, and go to state 83

    $default  reduce using rule 60 (comma_exprs)


State 160

   65 comma_indexedelems: comma_indexedelems COMMA indexedelem .

    $default  reduce using rule 65 (comma_indexedelems)


State 161

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 168


State 162

   57 methodcall: DOUBLE_DOT ID LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 169


State 163

   82 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE . stmt

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    stmt          go to state 170
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 164

   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON . elist RIGHT_PAR stmt

    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    $default  reduce using rule 59 (elist)

    expr       go to state 60
    term       go to state 30
    primary    go to state 31
    lvalue     go to state 32
    member     go to state 33
    call       go to state 34
    elist      go to state 171
    objectdef  go to state 35
    const      go to state 38


State 165

   70 funcdef: FUNCTION ID LEFT_PAR idlist RIGHT_PAR block .

    $default  reduce using rule 70 (funcdef)


State 166

   79 comma_ids: comma_ids COMMA ID .

    $default  reduce using rule 79 (comma_ids)


State 167

   67 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 67 (indexedelem)


State 168

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 53 (call)


State 169

   57 methodcall: DOUBLE_DOT ID LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 57 (methodcall)


State 170

   82 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt .

    $default  reduce using rule 82 (ifstmt)


State 171

   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist . RIGHT_PAR stmt

    RIGHT_PAR  shift, and go to state 172


State 172

   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR . stmt

    error         shift, and go to state 4
    STRING        shift, and go to state 5
    ID            shift, and go to state 6
    NUMBER        shift, and go to state 7
    MINUS         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    FUNCTION      shift, and go to state 12
    RETURN        shift, and go to state 13
    BREAK         shift, and go to state 14
    CONTINUE      shift, and go to state 15
    NOT           shift, and go to state 16
    LOCAL         shift, and go to state 17
    TRUE          shift, and go to state 18
    FALSE         shift, and go to state 19
    NIL           shift, and go to state 20
    LEFT_BRACE    shift, and go to state 21
    LEFT_BRACKET  shift, and go to state 22
    LEFT_PAR      shift, and go to state 23
    SEMICOLON     shift, and go to state 24
    DOUBLE_COLON  shift, and go to state 25
    PLUS_PLUS     shift, and go to state 26
    MINUS_MINUS   shift, and go to state 27

    stmt          go to state 173
    expr          go to state 29
    term          go to state 30
    primary       go to state 31
    lvalue        go to state 32
    member        go to state 33
    call          go to state 34
    objectdef     go to state 35
    block         go to state 36
    funcdef       go to state 37
    const         go to state 38
    ifstmt        go to state 39
    whilestmt     go to state 40
    forstmt       go to state 41
    returnstmt    go to state 42
    breakstmt     go to state 43
    continuestmt  go to state 44


State 173

   84 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt .

    $default  reduce using rule 84 (forstmt)
